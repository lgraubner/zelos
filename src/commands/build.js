const mri = require('mri')
const handlebars = require('handlebars')
const path = require('path')
const fs = require('fs-extra')
const chokidar = require('chokidar')
const debug = require('debug')('ssg:build')
const frontmatter = require('frontmatter')
const get = require('lodash/get')
const marked = require('marked')
const minify = require('html-minifier').minify

const copyStaticDirectory = require('../utils/copyStaticDirectory')
const logError = require('../utils/logError')
const info = require('../utils/output/info')
const error = require('../utils/output/error')
const exit = require('../utils/exit')

const pagesPath = `${process.cwd()}/example/pages`
const layoutDir = `${process.cwd()}/example/layouts`

const help = () => {
  console.log(`
  build help
`)
}

const getFileDir = (filePath, frontmatter) => {
  const url = get(frontmatter, 'data.url')

  if (url) {
    debug('found url in frontmatter')
    return path.join(global.publicPath, url)
  }

  const relativePath = path.relative(pagesPath, filePath)
  const basename = path.basename(relativePath)

  const dir = relativePath.replace(basename, '')

  if (basename.startsWith('index')) {
    debug('handling index file')

    return path.join(global.publicPath, dir)
  }

  const ext = path.extname(relativePath)

  return path.join(global.publicPath, dir, path.basename(relativePath, ext))
}

const renderContent = async (content, frontmatter, filePath) => {
  const layoutName = frontmatter.layout || 'default'

  const layoutPath = path.join(layoutDir, `${layoutName}.html`)

  try {
    const layout = await fs.readFile(layoutPath)

    const template = handlebars.compile(layout.toString())
    const contentHtml = marked(content, {
      highlight: function(code) {
        return require('highlight.js').highlightAuto(code).value
      }
    })

    const html = template(
      Object.assign(
        {
          content: contentHtml
        },
        frontmatter
      )
    )

    return minify(html, {
      collapseBooleanAttributes: true,
      collapseWhitespace: true,
      decodeEntities: true,
      includeAutoGeneratedTags: false,
      minifyCSS: true,
      minifyJS: true,
      processConditionalComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      sortAttributes: true,
      sortClassName: true,
      trimCustomFragments: true,
      useShortDoctype: true
    })
  } catch (err) {
    if (err.code === 'ENOENT') {
      error(`Layout "${layoutName}" could not be found.`)
      info(filePath)
      exit(1)
    }

    logError(err)
  }
}

const handleFile = async filePath => {
  const buffer = await fs.readFile(filePath)
  const content = buffer.toString()
  const fm = get(frontmatter(content), 'data', {})

  const fileDir = getFileDir(filePath, fm)

  await fs.ensureDir(fileDir)

  const renderedContent = await renderContent(content, fm, filePath)

  return fs.writeFile(`${fileDir}/index.html`, renderedContent)
}

const main = async ctx => {
  const argv = mri(ctx.argv.slice(1), {
    boolean: ['help'],
    alias: {
      help: 'h'
    }
  })

  if (argv.help) {
    help()
    return 0
  }

  try {
    await build()
  } catch (err) {
    logError(err)
  }
}

const build = async () => {
  // clear destination folder
  await fs.emptyDir(global.publicPath)

  console.log('')
  info('building static html for pages')
  chokidar
    .watch(pagesPath, {
      persistent: false
    })
    .on('add', handleFile)
    .on('change', handleFile)
    .on('error', err => logError(`Watcher error: ${err}`))

  info('copying static files')
  await copyStaticDirectory()
}

module.exports = main
