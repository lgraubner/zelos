// @flow
const fs = require('fs-extra')
const pluralize = require('pluralize')
const groupBy = require('lodash/groupBy')
const pick = require('lodash/pick')
const orderBy = require('lodash/orderBy')
const path = require('path')
const minifyHtml = require('html-minifier').minify
const handlebars = require('handlebars')
const marked = require('marked')
const highlight = require('highlight.js')

const wrapWithLayout = require('../utils/wrapWithLayout')

const createPages = async (
  pages: Array<Object>,
  manifest: Object,
  ctx: Object
) => {
  const { config, paths } = ctx

  // sort by date and group by type
  const groupedPages = groupBy(orderBy(pages, [p => p.date], ['desc']), p =>
    pluralize(p.type)
  )

  const siteData = {
    ...pick(config, [
      'author',
      'siteName',
      'description',
      'params',
      'language'
    ]),
    rssLink: config.rss ? `/${config.rssFilename}` : null,
    serviceWorkerLink: config.serviceWorker ? '/sw.js' : null,
    manifest
  }

  return Promise.all(
    pages.map(async page => {
      const data = {
        page,
        site: {
          ...siteData,
          allPages: pages,
          ...groupedPages
        }
      }

      let content = page.content
      if (page.contentType === 'md') {
        content = marked(page.content, {
          gfm: true,
          highlight: function(code, lang) {
            try {
              return highlight.highlight(lang, code).value
            } catch (err) {
              return code
            }
          }
        })
      }

      if (page.layout !== null) {
        const layoutPath = path.resolve(paths.layouts, `${page.layout}.html`)
        content = await wrapWithLayout(content, layoutPath)
      }

      const baseLayoutPath = path.join(paths.layouts, '_base.html')

      content = await wrapWithLayout(content, baseLayoutPath)
      const baseTemplate = handlebars.compile(content)
      const html = baseTemplate({ ...data })

      if (config.minify) {
        return minifyHtml(html, {
          collapseBooleanAttributes: true,
          collapseWhitespace: true,
          decodeEntities: true,
          includeAutoGeneratedTags: false,
          minifyCSS: true,
          minifyJS: false,
          processConditionalComments: true,
          removeEmptyAttributes: true,
          removeEmptyElements: true,
          removeRedundantAttributes: true,
          removeScriptTypeAttributes: true,
          removeStyleLinkTypeAttributes: true,
          sortAttributes: true,
          sortClassName: true,
          trimCustomFragments: true,
          useShortDoctype: true
        })
      }

      return fs.outputFile(page.file, html)
    })
  )
}

module.exports = createPages
