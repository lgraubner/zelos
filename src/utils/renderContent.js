// @flow
const handlebars = require('handlebars')
const path = require('path')
const marked = require('marked')
const minify = require('html-minifier').minify

const getTemplate = require('./getTemplate')

const renderContent = async (
  content: string,
  type: string,
  data: Object,
  layoutFolderPath: string,
  minifyContent: boolean = true
): Promise<string | void> => {
  const baseLayoutPath = path.join(layoutFolderPath, '_base.html')
  const layoutPath = path.join(layoutFolderPath, `${data.page.layout}.html`)

  // compile templates
  const baseTemplate = await getTemplate(baseLayoutPath)
  const template = await getTemplate(layoutPath)

  let contentHtml = ''
  // compile content
  if (type === 'md') {
    contentHtml = marked(content, {
      highlight: function(code) {
        return require('highlight.js').highlightAuto(code).value
      }
    })
  } else {
    const contentTemplate = handlebars.compile(content)
    contentHtml = contentTemplate(data)
  }

  // compile layout
  // @TODO: check if layout provided
  const layoutHtml = template({
    content: contentHtml,
    ...data
  })

  const html = baseTemplate({
    content: layoutHtml,
    ...data
  })

  if (minifyContent) {
    return minify(html, {
      collapseBooleanAttributes: true,
      collapseWhitespace: true,
      decodeEntities: true,
      includeAutoGeneratedTags: false,
      minifyCSS: true,
      minifyJS: true,
      processConditionalComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      sortAttributes: true,
      sortClassName: true,
      trimCustomFragments: true,
      useShortDoctype: true
    })
  }

  return html
}

module.exports = renderContent
