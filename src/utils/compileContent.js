// @flow
const path = require('path')
const minifyHtml = require('html-minifier').minify
const handlebars = require('handlebars')
const marked = require('marked')
const highlight = require('highlight.js')

const TemplateCache = require('../lib/TemplateCache')

const compileContent = async (
  data: Object,
  ctx: Object
): Promise<string | void> => {
  const { page } = data
  const { paths, config } = ctx

  let html = ''
  if (page.contentType === 'md') {
    html = marked(page.content, {
      gfm: true,
      highlight: function(code, lang) {
        try {
          return highlight.highlight(lang, code).value
        } catch (err) {
          return code
        }
      }
    })
  } else if (page.contentType === 'html') {
    const contentTemplate = handlebars.compile(page.content)
    html = contentTemplate(data)
  }

  if (page.layout !== null) {
    const layoutPath = path.join(paths.layouts, `${page.layout}.html`)
    const template = await TemplateCache.get(layoutPath)

    html = template({
      content: html,
      ...data
    })
  }

  const baseLayoutPath = path.join(paths.layouts, '_base.html')
  const baseTemplate = await TemplateCache.get(baseLayoutPath)

  html = baseTemplate({
    content: html,
    ...data
  })

  if (config.minify) {
    return minifyHtml(html, {
      collapseBooleanAttributes: true,
      collapseWhitespace: true,
      decodeEntities: true,
      includeAutoGeneratedTags: false,
      minifyCSS: true,
      minifyJS: false,
      processConditionalComments: true,
      removeEmptyAttributes: true,
      removeEmptyElements: true,
      removeRedundantAttributes: true,
      removeScriptTypeAttributes: true,
      removeStyleLinkTypeAttributes: true,
      sortAttributes: true,
      sortClassName: true,
      trimCustomFragments: true,
      useShortDoctype: true
    })
  }

  return html
}

module.exports = compileContent
